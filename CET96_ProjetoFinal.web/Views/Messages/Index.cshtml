@model List<CET96_ProjetoFinal.web.Models.ConversationViewModel>

@{
    ViewData["Title"] = "Message Center";
}

<h1>@ViewData["Title"]</h1>
<hr />

<div>
    <a asp-controller="Messages" asp-action="Create" asp-route-condominiumId="@ViewBag.CondominiumId" class="btn btn-success">Create New Conversation</a>

    @if (User.IsInRole("Unit Owner"))
    {
        <a asp-controller="UnitOwner" asp-action="Index" class="btn btn-secondary">Back to Dashboard</a>
    }
    else if (User.IsInRole("Condominium Staff"))
    {
        <a asp-controller="StaffDashboard" asp-action="Index" class="btn btn-secondary">Back to Dashboard</a>
    }
    else if (User.IsInRole("Condominium Manager"))
    {
        <a asp-controller="Messages"
           asp-action="Dashboard"
           class="btn btn-secondary">Back to Messaging Dashboard</a>
    }
    else if (User.IsInRole("Company Administrator"))
    {
        <a asp-controller="Messages"
           asp-action="Dashboard"
           asp-route-condominiumId="@ViewBag.CondominiumId"
           class="btn btn-secondary">Back to Messaging Dashboard</a>
    }
</div>
<div class="row">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">Conversations</div>
            <ul class="list-group list-group-flush" id="conversation-list">
                @* This section now dynamically builds the list from the data passed by the controller. *@
                @if (Model.Any())
                {
                    @foreach (var convo in Model) // The OrderBy is now in the controller
                    {
                        @* Each list item is clickable and stores its unique conversation ID in a data attribute. *@
                        <li class="list-group-item list-group-item-action" style="cursor: pointer;" data-conversation-id="@convo.Id">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">@convo.Subject</h6>
                                <small>@convo.Status</small>
                            </div>
                            <p class="mb-1">@convo.OtherParticipantName</p>
                            <small class="text-muted">@convo.CreatedAt.ToString("g")</small>
                        </li>
                    }
                }
                else
                {
                    <li class="list-group-item">No conversations found.</li>
                }
            </ul>
        </div>
    </div>

    <div class="col-md-8">
        <div class="card">
            <div class="card-header" id="chat-header">
                Select a Conversation
            </div>
            <div class="card-body" style="height: 500px; overflow-y: scroll;" id="message-list">
            </div>
            <div class="card-footer">
                <div class="input-group">
                    <input type="text" class="form-control" id="message-input" placeholder="Select a conversation to type..." disabled />
                    <button class="btn btn-primary" id="send-button" disabled>Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>

    <script>
                document.addEventListener("DOMContentLoaded", function () {
                    let currentConversationId = null;
                    let previousConversationId = null; // <-- NEW: Keep track of the last room joined

                    const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
                    const sendButton = document.getElementById("send-button");
                    const messageInput = document.getElementById("message-input");
                    const messageList = document.getElementById("message-list");
                    const conversationListItems = document.querySelectorAll("#conversation-list li[data-conversation-id]");
                    const chatHeader = document.getElementById("chat-header");

                    // --- Function to load messages for a selected conversation ---
                    async function loadMessages(conversationId, subject) {
                        // ** THE FIX - PART 1: JOIN THE NEW GROUP **
                        // If we were in a different conversation before, leave that group first.
                        if (previousConversationId && previousConversationId !== conversationId) {
                            connection.invoke("LeaveConversationGroup", previousConversationId).catch(err => console.error(err.toString()));
                        }

                        // Join the new conversation's group.
                        connection.invoke("JoinConversationGroup", conversationId).catch(err => console.error(err.toString()));

                        // Update our tracking variables.
                        currentConversationId = conversationId;
                        previousConversationId = conversationId;

                        messageList.innerHTML = '<h6>Loading messages...</h6>';
                        chatHeader.textContent = subject;

                        try {
                            const response = await fetch(`/Messages/GetMessagesForConversation?conversationId=${conversationId}`);
                            const messages = await response.json();
                            messageList.innerHTML = '';
                            messages.forEach(msg => {
                                appendMessage(msg.senderName, msg.content);
                            });

                            messageInput.disabled = false;
                            sendButton.disabled = false;
                            messageInput.placeholder = "Type a message...";
                        } catch (error) {
                            console.error("Failed to load messages:", error);
                            messageList.innerHTML = '<h6 class="text-danger">Could not load messages.</h6>';
                        }
                    }

                    // --- Function to append a message to the UI ---
                    function appendMessage(user, message) {
                        const p = document.createElement("p");
                        p.innerHTML = `<strong>${user}:</strong> ${message}`;
                        messageList.appendChild(p);
                        messageList.scrollTop = messageList.scrollHeight;
                    }

                    // --- Add click listeners to each conversation item ---
                    conversationListItems.forEach(item => {
                        item.addEventListener("click", function () {
                            const conversationId = parseInt(this.getAttribute("data-conversation-id"));
                            const subject = this.querySelector("h6").textContent;

                            conversationListItems.forEach(i => i.classList.remove("active"));
                            this.classList.add("active");

                            loadMessages(conversationId, subject);
        });
                    });

                    // --- SignalR connection logic ---
                    connection.on("ReceiveMessage", function (messageViewModel) {
                        appendMessage(messageViewModel.senderName, messageViewModel.content);
                    });

                    connection.start()
                        .then(() => console.log("SignalR Connected!"))
                        .catch(err => console.error(err.toString()));

                    // --- Send button click event ---
                    sendButton.addEventListener("click", function (event) {
                        const message = messageInput.value;
                        if (message.trim() !== "" && currentConversationId) {
                            // ** THE FIX - PART 2: SEND MESSAGE TO THE CURRENT GROUP **
                            // This now sends the message to the correct conversation group on the server.
                            connection.invoke("SendMessage", currentConversationId, message).catch(err => console.error(err.toString()));
                            messageInput.value = "";
                            messageInput.focus();
                        }
                        event.preventDefault();
                    });
                });
    </script>
}